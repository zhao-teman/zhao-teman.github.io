<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springIOC</title>
      <link href="2021/02/10/springIOC/"/>
      <url>2021/02/10/springIOC/</url>
      
        <content type="html"><![CDATA[<h1 id="spring-学习总结：Spring核心技术：Spring-IOC"><a href="#spring-学习总结：Spring核心技术：Spring-IOC" class="headerlink" title="spring 学习总结：Spring核心技术：Spring IOC"></a>spring 学习总结：Spring核心技术：Spring IOC</h1><h3 id="1-什么是Spring-IOC"><a href="#1-什么是Spring-IOC" class="headerlink" title="1.什么是Spring IOC"></a>1.什么是Spring IOC</h3><a id="more"></a><ul><li>IOC:Ioc—Inversion of Control(即==控制反转==)，将对象的创建以及对象依赖关系反转给Spring 容器，程序本身不进行维护。</li><li>IOC只是一种编程思想，在Spring中底层是通过==配置+工厂模式+反射==实现的<ul><li><code>通过读取配置类中的信息，获取.class对象，在工厂模式种利用反射创建对象并放入容器，交给Spring进行管理</code></li></ul></li><li>它的好处是：==原来由我们自己手动创建并维护的对象，现在都可以交给Spring的IOC容器去进行管理维护==</li></ul><h3 id="2-配置文件的书写（bean标签）"><a href="#2-配置文件的书写（bean标签）" class="headerlink" title="2.配置文件的书写（bean标签）"></a>2.配置文件的书写（bean标签）</h3><h4 id="2-1-标签的作用"><a href="#2-1-标签的作用" class="headerlink" title="2.1 标签的作用"></a>2.1<bean> 标签的作用</h4><p>用于配置让spring容器来创建对象</p><p>默认情况下它调用的是类中的无参构造函数（反射）</p><h4 id="2-2-标签的属性"><a href="#2-2-标签的属性" class="headerlink" title="2.2  标签的属性"></a>2.2 <bean> 标签的属性</h4><ul><li>id 给在容器中的对象提供一个唯一标识，用来获取对象</li><li>name 功能类似id，命名要求没有id严格</li><li>class 指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数</li><li>scope 指定对象范围<ul><li>sigleton 默认值，单例</li><li>prototype 多例</li><li>request WEB项目中,Spring容器创建一个Bean对象，会将该对象存入request </li><li>session WEB项目中，Spring容器创建一个Bean对象，会将该对象存入session </li><li>golbal session 只有应用在基于portlet的Web应用程序中才有意义，它映射到portlet的 global范围的session </li></ul></li><li>init-method : 指定类的初始化方法的名称</li><li>destory-method : 指定类中销毁方法的名称 </li><li>lazy-init ：指定使用进行延迟加载</li></ul><p>单例和多例的区别：</p><p>scope=”singleton” 一个应用只有一个对象的实例（默认值）</p><ul><li>创建容器时，对象就被创建了</li><li>只要容器不销毁，对象一直存在</li><li>当容器销毁时，对象就被销毁了</li></ul><p>scope=”prototype” 每次访问获取对象，都会重新创建对象实例。</p><ul><li><p>当从容器中获取对象时，创建新的对象实例</p><p>​    —(通过ApplicationContext对象获取容器中获取对象)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ac = </span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li>只要对象在使用中，就一直存在。当对象长时间不用时，被java的垃圾回收器回收</li></ul><h4 id="2-3-Spring-DI"><a href="#2-3-Spring-DI" class="headerlink" title="2.3 Spring DI"></a>2.3 Spring DI</h4><p>​        DI(Denpendency Injection)，<strong>依赖注入</strong>，<strong>SpringIOC容器中的核心操作</strong>，可以将对象需要的属性值自动注入</p><h5 id="2-3-1-set方法注入-要求类中要有set方法"><a href="#2-3-1-set方法注入-要求类中要有set方法" class="headerlink" title="2.3.1  **set方法注入 **(要求类中要有set方法)"></a>2.3.1  **set方法注入 **(要求类中要有set方法)</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;hunsband&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.ioc.Hunsband&quot;</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">构造器注入</span></span><br><span class="line"><span class="comment">property 给属性采用set方法赋值 </span></span><br><span class="line"><span class="comment">name : 属性名，调用该属性的set方法 </span></span><br><span class="line"><span class="comment">value: 属性值，通过set方法赋值 </span></span><br><span class="line"><span class="comment">ref: 属性是其他bean类型采用ref(字符串除外)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;salary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br></pre></td></tr></table></figure><h5 id="2-3-2-构造器注入"><a href="#2-3-2-构造器注入" class="headerlink" title="2.3.2  构造器注入"></a>2.3.2  <strong>构造器注入</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">constructor-arg 让属性赋值采用构造函数赋值</span></span><br><span class="line"><span class="comment">index: 指定参数在构造函数中的索引位置</span></span><br><span class="line"><span class="comment">type: 指定参数在构造函数中的数据类型</span></span><br><span class="line"><span class="comment">name: 指定参数在构造函数中的名字</span></span><br><span class="line"><span class="comment">value: 具体的参数值</span></span><br><span class="line"><span class="comment">ref: 如果需要的数据为其他bean类型，使用ref</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;husband&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.ioc.Husband&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mary&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;salary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>或者也可以使用构造器参数的下标进行注入：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;husband&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.ioc.Husband&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-3-命名空间注入"><a href="#2-3-3-命名空间注入" class="headerlink" title="2.3.3 命名空间注入"></a>2.3.3 <strong>命名空间注入</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--必须有命名空间的声明— xmlns:p=&quot;http://www.springframework.org/schema/p&quot;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;husband&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.ioc.Husband&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;3&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;lucy&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:salary</span>=<span class="string">&quot;4000&quot;</span> <span class="attr">p:date-ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-3-4-集合属性注入"><a href="#2-3-4-集合属性注入" class="headerlink" title="2.3.4 集合属性注入"></a>2.3.4 <strong>集合属性注入</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;entity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.ioc.Entity&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入数组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myStrs&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入List --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>DDD<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>EEE<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>FFF<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入Set --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mySet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>GGG<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>KKK<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>LLL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入myMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 俩种形式都可以注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>20<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入Properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myProps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;name&quot;</span>&gt;</span>mary<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;age&quot;</span>&gt;</span>30<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-5-注解方式-在类上加注解"><a href="#2-3-5-注解方式-在类上加注解" class="headerlink" title="2.3.5 注解方式:在类上加注解"></a>2.3.5 注解方式:在类上加注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pigpeng.ioc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Component</span> 该注解加在类上代表该类需要让Spring容器去创建对象  单词意思为组件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Value</span> 用来给属性注入数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Value(&quot;1&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@Value(&quot;tom&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Value(&quot;20&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age; &#125;</span><br></pre></td></tr></table></figure><h6 id="配置文件中加入需要扫描的包-而且需要引入aop的jar包-否则报错"><a href="#配置文件中加入需要扫描的包-而且需要引入aop的jar包-否则报错" class="headerlink" title="配置文件中加入需要扫描的包,而且需要引入aop的jar包  否则报错"></a>配置文件中加入需要扫描的包,而且需要引入aop的jar包  否则报错</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置要扫描的注解包 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.pigpeng.ioc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>###3 Spring 常用注解</p><p>####3.1 Spring中常用的注解有以下几个：</p><ul><li><p>==@Component==</p><p><strong>作用：</strong></p><p>让spring容器来管理对象，相当于在xml中配置一个bean。</p><p><strong>属性：</strong></p><p>value: 指定bean的名字，如果不指定，默认为当前类名且首字母小写</p></li><li><p>==@Controller== , ==@Service== , ==@Repository==</p><p><strong>作用：</strong></p><p>功能与 @Component 作用一样，只不过其语义更加明确</p><p>@Controller 一般作用于 表现层</p><p>@Service 一般作用于 业务层</p><p>@Repository 一般作用于 持久层</p><p><strong>属性：</strong></p><p>value : 指定bean的名字,如果不指定，默认为当前类名，且首字母小写</p></li><li><p>==@Value==</p><p><strong>作用：</strong></p><p>用于给属性注入基本数据，此注解中还支持SpEL</p><p><strong>属性：</strong></p><p>value :具体的属性值</p></li><li><p>==@Autowaired==</p><p><strong>作用：</strong></p><p>自动按照类型注入，使用注解注入属性时，set方法可以省略，该注解只能注入bean类型，当有多</p><p>个相同类型时，将bean的名字作为要注入对象的属性名，也可以注入成功</p></li><li><p>==@Qualifier==</p><p><strong>作用：</strong></p><p>在 @Autowaired 注入的基础之上，再按照Bean的名字注入。在给属性注入数据时不能独立使</p><p>用，必须和 @Autowaired 一起使用</p><p><strong>属性：</strong></p><p>value：指定bean的名字</p></li><li><p>==@Resource==</p><p><strong>作用：</strong></p><p>直接按照bean的id注入,只能注入bean类型</p><p><strong>属性：</strong></p><p>name: bean的名字</p></li><li><p>==@Scope==</p><p><strong>作用：</strong></p><p>指定bean的作用范围</p><p><strong>属性：</strong></p><p>value: 指定范围值</p><p>取值为： singleton , prototype , request , session , golbalsession </p></li><li><p>==@PostConstruct==</p><p><strong>作用：</strong></p><p>指定初始化方法@PreDestroy</p><p><strong>作用：</strong></p><p>指定销毁方法</p></li></ul><h4 id="3-2-纯注解进行配置"><a href="#3-2-纯注解进行配置" class="headerlink" title="3.2.纯注解进行配置"></a>3.2.纯注解进行配置</h4><p>==利用 AnnotationConfigApplicationContext 类指定扫描的包扫描配置类==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pigpeng.annataion; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext; </span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoTationTest</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">&quot;com.pigpeng.ioc&quot;</span>); </span><br><span class="line">        Teacher teacher = (Teacher) ac.getBean(<span class="string">&quot;teacher&quot;</span>); </span><br><span class="line">        System.out.println(teacher); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-Configuration"><a href="#3-3-Configuration" class="headerlink" title="3.3.@Configuration"></a>3.3.@Configuration</h4><p>​    <strong>作用：</strong></p><ul><li>用于指定当前类是一个spring配置类，当创建容器时会从该类上加载注解</li><li>可以使用AnnotationConfigApplicationContext(配置类.class) 加载配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pigpeng.config; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration; </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">  *<span class="doctag">@Configuration</span>  </span></span><br><span class="line"><span class="comment">  *表示当前类是spring的一个配置类  </span></span><br><span class="line"><span class="comment">  *相当于之前的xml，可以完成其对应的配置功能</span></span><br><span class="line"><span class="comment">  */</span> </span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-ComponentScan"><a href="#3-4-ComponentScan" class="headerlink" title="3.4.@ComponentScan"></a>3.4.@ComponentScan</h4><p>​    <strong>作用：</strong></p><ul><li>用于指定spring在初始化容器时要扫描的包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pigpeng.config; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration; </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Configuration</span> </span></span><br><span class="line"><span class="comment">    * 表示当前类是spring的一个配置类 </span></span><br><span class="line"><span class="comment">    * 相当于之前的xml，可以完成其对应的配置功能 </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@ComponentScan</span>(&quot;com.pigpeng.ioc&quot;) </span></span><br><span class="line"><span class="comment">    * 扫描当前包和指定包下面的java类，发现其中spring注解 </span></span><br><span class="line"><span class="comment">    * 包含指定包下面的子包 </span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.pigpeng.ioc&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-Bean"><a href="#3-5-Bean" class="headerlink" title="3.5.@Bean"></a>3.5.@Bean</h4><p><strong>作用：</strong></p><p>该注解只能写在方法上，表明使用此方法创建一个对象，并且放入spring容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pigpeng.config; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration; </span><br><span class="line"><span class="keyword">import</span> com.pigpeng.ioc.Teacher;</span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123; </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 一个<span class="doctag">@Bean</span>注解就相当于bean标签 </span></span><br><span class="line"><span class="comment">    * 方法的返回值对象会存储在Spring容器中 </span></span><br><span class="line"><span class="comment">    * 方法名就是该对象在容器中的唯一标识 </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Teacher <span class="title">teacher</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Teacher();                                                                   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意，也可以手动指定名字，例如 @Bean(&quot;teacher&quot;)</code></p><h4 id="3-6-PropertySource"><a href="#3-6-PropertySource" class="headerlink" title="3.6 @PropertySource"></a>3.6 @PropertySource</h4><p><strong>作用：</strong></p><p>用于加载 .properties 文件中的值，加载后可以使用 @Value(“${key}”) 的形式来获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pigpeng.config; </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource; </span><br><span class="line"><span class="keyword">import</span> com.pigpeng.ioc.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;my-value.properties&quot;)</span></span><br><span class="line"><span class="comment">//指定要读取的资源文件位置 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;teacher.id&#125;&quot;)</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;teacher.name&#125;&quot;)</span> </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;teacher.age&#125;&quot;)</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">    <span class="meta">@Bean(&quot;t&quot;)</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Teacher <span class="title">teacher</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        Teacher t = <span class="keyword">new</span> Teacher(); </span><br><span class="line">        t.setId(id); </span><br><span class="line">        t.setName(name); </span><br><span class="line">        t.setAge(age); </span><br><span class="line">        <span class="keyword">return</span> t; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>properties文件：my-value.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">teacher.id</span>=<span class="string">(自己想要的值)</span></span><br><span class="line"><span class="meta">teacher.name</span>=<span class="string">(自己想要的值)</span></span><br><span class="line"><span class="meta">teacher.age</span>=<span class="string">(自己想要的值)</span></span><br></pre></td></tr></table></figure><p>等价于xml配置文件中的<code>&lt;properties &gt;</code>标签</p><h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><p><strong>作用：</strong></p><p>用于导入其他配置类</p><p>被引入配置类中，可以不用再写 @Configuration 注解。当然，写上也没问题</p><p>一般项目中写了很多配置类的时候，可以再写一个总的配置类，这个配置类上使用 @Import 去引入其他的配置，将来容器只要读取这个一个总的配置类即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pigpeng.config; </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource; </span><br><span class="line"><span class="keyword">import</span> com.pigpeng.ioc.Teacher; </span><br><span class="line"></span><br><span class="line"><span class="meta">@PropertySource(&quot;my-value.properties&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;teacher.id&#125;&quot;)</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;teacher.name&#125;&quot;)</span> </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;teacher.age&#125;&quot;)</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">    <span class="meta">@Bean(&quot;t&quot;)</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Teacher <span class="title">teacher</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        Teacher t = <span class="keyword">new</span> Teacher(); </span><br><span class="line">        t.setId(id); </span><br><span class="line">        t.setName(name); </span><br><span class="line">        t.setAge(age); </span><br><span class="line">        <span class="keyword">return</span> t; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 该配置类会被@Import引入其他配置类，所以可以不添加@Configuration注解</p><p>等价于xml配置文件中的<code>&lt;@import resource=&quot;&quot;&gt;</code>标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.config; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration; </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import; </span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="meta">@Import(value = &#123;SpringConfig.class&#125;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123; </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br></pre></td></tr></table></figure><p>来获取配置即可</p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h3><p>spring中的三种配置方式：</p><ul><li>xml配置</li><li>annotation配置</li><li>javaconfig配置</li></ul><p>1、xml配置，可以把配置信息都写在xml中，方便阅读、维护和修改。</p><p>2、annotation配置，可以使用注解来代替xml中的标签，在java代码中配置，但是这种方式，会让配置信</p><p>息分散在各个java类中，虽然简化了xml的繁琐配置，但是不方便阅读、维护和修改。</p><p>3、javaconfig配置，主要是使用了 @Configuration 注解，来代替原来的xml配置，可以将配置信息较 </p><p>为<strong>集中</strong>的写在一个java类中，并且还提供了相关的配套的其他注解类，解决了使用普通注解配置的一些</p><p>问题。同时将来配合<strong>条件注解</strong>可以完成一些高级的配置功能。例如springboot中使用的自动配置等</p><p><code>注意，根据当前项目的情况，灵活的选择合适的配置方式，如果有需要也可以将多种配置方式混合使用  </code></p><h3 id="5-Spring-Test"><a href="#5-Spring-Test" class="headerlink" title="5  Spring Test"></a>5  Spring Test</h3><p>Spring框架中，也整合了Junit测试框架，可以更加方便的对使用了Spring框架的项目进行单元测试</p><p><code>需要导入spring-test测试模块jar包和Junit单元测试框架</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pigpeng.test; </span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith; </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired; </span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration; </span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner; </span><br><span class="line"><span class="keyword">import</span> com.pigpeng.config.TestConfig; </span><br><span class="line"><span class="keyword">import</span> com.pigpeng.ioc.Student;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span> </span><br><span class="line"><span class="meta">@ContextConfiguration(classes=TestConfig.class)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJUnit4Test</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//@Autowired 注解，指的让容器把需要的对象进行自动注入</span></span><br><span class="line">    <span class="keyword">private</span> Student student; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@org</span>.junit.Test </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(student); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><p>==@RunWith(SpringJUnit4ClassRunner.class) :==</p><ul><li>指明使用什么类来创建容器</li><li>也可以写成 @RunWith(SpringRunner.class) </li></ul><p>==@ContextConfiguration(classes=TestConfig.class) :==</p><ul><li><p>location 导入具体的配置文件，如果有的话</p><p>​    例如，@ContextConfiguration(locations = “classpath:applicationContext.xml”) </p></li><li><p>classes 导入具体的配置类，如果有的话</p></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>String&amp;StringBuffer&amp;StringBuilder</title>
      <link href="2021/01/05/String-StringBuffer-StringBuilder/"/>
      <url>2021/01/05/String-StringBuffer-StringBuilder/</url>
      
        <content type="html"><![CDATA[<p>关于String &amp; StringBuffer &amp; StringBuilder</p><a id="more"></a><p>String类是final类，也即意味着String类不能被继承，并且它的成员方法都默认为final方法。</p><p>在Java中，被final修饰的类是不允许被继承的，并且该类中的成员方法都默认为final方法。</p><p>String类其实是通过char数组来保存字符串的</p><p>String中的方法很多操作都不是在原有的字符串上进行的，而是重新生成了一个新的字符串对象。</p><h2 id="也就是说进行这些操作后，最原始的字符串并没有被改变。"><a href="#也就是说进行这些操作后，最原始的字符串并没有被改变。" class="headerlink" title="也就是说进行这些操作后，最原始的字符串并没有被改变。"></a>也就是说进行这些操作后，最原始的字符串并没有被改变。</h2><h2 id="所以可以这么认为："><a href="#所以可以这么认为：" class="headerlink" title="所以可以这么认为："></a>所以可以这么认为：</h2><p>“对String对象的任何改变都不影响到原对象，相关的任何change操作都会生成新的对象”。</p><p>那么问题来了，每次对String的操作都会生成新的String对象，资源浪费，效率低下的问题冒了出来。</p><p>为了解决这种问题 引入了两个新的类——StringBuffer类和StringBuild类来对此种变化字符串进行处理。</p><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p><p>   和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p><p>   StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</p><p>   由于 StringBuilder 相较于 StringBuffer 有速度优势，单线程操作建议使用 StringBuilder 类。</p><p>   然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p><hr><pre><code> 总结：    （1）如果要操作少量的数据用 String；（2）多线程操作字符串缓冲区下操作大量数据 StringBuffer；（3）单线程操作字符串缓冲区下操作大量数据 StringBuilder。</code></pre><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mvn不是内部或外部命令问题的解决</title>
      <link href="2020/12/05/mvn%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
      <url>2020/12/05/mvn%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>出现’mvn’ 不是内部或外部命令，也不是可运行的程序问题</p><a id="more"></a><p>之前就有的问题，今天又看到了，解决的同时记录一下。<br>    1.没有安装mvn(不过一般没有这种没有安装就使用mvn命令的人吧-.-)<br>        可以先查看一下maven安装路径（命令窗口cmd）：echo %MAVEN_HOME%<br>        可以的话↓<br>    2.没有配置好环境变量导致系统找不到mvn程序运行命令。解决办法：<br>    查看maven版本：mvn -v</p><pre><code>如果控制台提示：mvn不是内部或外部命令，也不是可运行的程序或批处理文件</code></pre><p>解决方法：把MAVE_HOME系统变量删掉(或者不变，不过留着应该没啥用)，直接在Path中变量中 添加maven的绝对路径，一直添加到bin目录下，win7要加”;”号</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven项目导入oracle的依赖，报错</title>
      <link href="2020/12/01/Maven%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5oracle%E7%9A%84%E4%BE%9D%E8%B5%96%EF%BC%8C%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99/"/>
      <url>2020/12/01/Maven%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5oracle%E7%9A%84%E4%BE%9D%E8%B5%96%EF%BC%8C%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>首先简单介绍一下Maven<br>    Maven是Apache下的一个开源免费的项目，主要是用来管理项目，实现语言是java<br>    Maven是基于项目对象模型(POM，Project Object Model)，把项目的每个环节抽<br>象，单独定义，这样就可以对一个项目进行各个环节的程序化管理，并且允许用户进<br>行扩展，满足用户定制化的需求。<br>   <a id="more"></a><br>   那就直接说问题了<br>   因为Oracle作为商业软件 apache的中央仓库下面是没有Oracle的jar包的<br>所以根据maven项目管理的机制，你的本地仓库如果没有这个jar包，maven去中央仓库<br>找是找不到的所以需要我们自己下载</p><p>下载好需要的jar包之后<br>在jar所在目录路径中，打开cmd执行以下命令<br>比如使用的是Oracle6(Oracle7，Oracle8对应的安装命令改掉数字就行)<br>mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=6 -Dpackaging=jar -Dfile=ojdbc6.jar -DgeneratePom=true<br>把已有的jar直接安装到仓库中<br>再在使用的时候引入依赖就没问题了！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java项目上出现感叹号</title>
      <link href="2020/11/25/java%E9%A1%B9%E7%9B%AE%E4%B8%8A%E5%87%BA%E7%8E%B0%E6%84%9F%E5%8F%B9%E5%8F%B7/"/>
      <url>2020/11/25/java%E9%A1%B9%E7%9B%AE%E4%B8%8A%E5%87%BA%E7%8E%B0%E6%84%9F%E5%8F%B9%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>项目上出现红色感叹号↓</p><p>  可能的原因：一是jdk的版本不符合<br>            二是可能jar包不兼容了</p><a id="more"></a>    <p>解决办法：<br>   原因一：jdk的版本不符合<br>        jdk版本不符合，将项目的jdk换成自己配置好的jdk。↓<br>        右键项目——&gt;build path——&gt;Configuer build path——&gt; 删掉错误的jdk版本 ——&gt; add library ——&gt; jre system library ——&gt; 选择正确的jdk版本——&gt; apply and close<br>   原因二： jar包有问题。<br>        右击项目——&gt;  build path ——&gt; configure bulid path ——&gt; libraries，点开各个jar包，将带叉号的删除掉重导包 或者使用maven管理项目</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
